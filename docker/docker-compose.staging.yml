version: '3.9'

services:
  mongodb:
    image: mongo:7-jammy
    container_name: stock-mgmt-mongodb-staging
    restart: unless-stopped
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: stock-management-staging
    volumes:
      - mongodb_staging_data:/data/db
      - mongodb_staging_config:/data/configdb
    networks:
      - stock-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/stock-management-staging --quiet
      interval: 20s
      timeout: 5s
      retries: 3

  backend:
    build:
      context: ../apps/backend
      dockerfile: Dockerfile
      target: production
    container_name: stock-mgmt-backend-staging
    restart: unless-stopped
    ports:
      - '3001:3001'
    environment:
      NODE_ENV: staging
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongodb:27017/stock-management-staging?authSource=admin
      PORT: 3001
    env_file:
      - ../apps/backend/.env.staging
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - stock-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ../apps/frontend
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3001/api}
    container_name: stock-mgmt-frontend-staging
    restart: unless-stopped
    ports:
      - '8080:80'
    depends_on:
      - backend
    networks:
      - stock-network

volumes:
  mongodb_staging_data:
    driver: local
  mongodb_staging_config:
    driver: local

networks:
  stock-network:
    driver: bridge
